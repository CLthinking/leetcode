package com.uestc.pinduoduo;

import java.util.Arrays;
import java.util.Scanner;

/**
 * @author CLthinking
 * @date 2019/7/13 下午 08:15
 */
public class Main {

    /**
     * 回合制游戏,每次可以聚力，或者攻击。聚力可以强化下一次普攻。
     * 给定血量HP, 普通攻击造成的伤害normalAttack, 强化攻击造成的伤害buffedAttack，
     * 求最小几回合干掉对手
     */

    // 解法1， 使用启发式算法，如果强化普攻大于2倍的普通攻击就一直聚力，否则一直普攻
    private static int attackGame(int hp, int normalAttack, int buffedAttack) {
        if (buffedAttack <= 2 * normalAttack) {
            return hp % normalAttack == 0 ? hp / normalAttack : hp / normalAttack + 1;
        }
        int num = hp / buffedAttack;
        return 2 * num + (hp % buffedAttack == 0 ? 0 :
                hp % buffedAttack > normalAttack ? 2 : 1);
    }

    // 解法2， 暴力搜索， 递归深度太大，抛出StackOverflowError异常
    private static int attackGame2(int hp, int normalAttack, int buffedAttack) {
        return dfs(hp, normalAttack, buffedAttack);
    }
    private static int dfs(int hp, int normalAttack, int buffedAttack) {
        if (hp > 0) {
            return Math.min(1 + dfs(hp - normalAttack, normalAttack, buffedAttack),
                            2 + dfs(hp - buffedAttack, normalAttack, buffedAttack));
        }
        return 0;
    }

    // 解法三， 使用有记忆的搜索，但是当hp太大时，也会抛出StackOverflowError异常。
    // PS:在牛客上提交报：请检查是否存在数组越界等非法访问情况，但是在IDEA上运行时没有问题的。
    private static int attackGame3(int hp, int normalAttack, int buffedAttack) {
        int[] map = new int[hp + 1]; // map里面记录的血量为i时，最小的攻击次数。
        return momeryDfs(hp, normalAttack, buffedAttack, map);
    }
    private static int momeryDfs(int hp, int normalAttack, int buffedAttack, int[] map) {
        int res = 0;
        if (hp > 0) {
            res = map[hp] != 0 ? map[hp] : Math.min(
                    1 + momeryDfs(hp - normalAttack, normalAttack, buffedAttack, map),
                    2 + momeryDfs(hp - buffedAttack, normalAttack, buffedAttack, map));
            map[hp] = res;
        }
        return res;
    }

    /**
     * 种树
     * 一共M棵数，N种品种，要求相邻的树，品种不一样，求字典序最小的一种情况， 不存在返回-
     */

    private static String plantTree(int N, int[] nums, int M) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > M / 2 + 1) {
//                System.out.println("-");
                sb.append("-");
                return sb.toString();
            }
        }
        int prev = 1;
//        System.out.print("1 ");
        sb.append("1 ");
        nums[0]--;
        for (int i = 1; i < M; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (j != prev - 1 && nums[j] != 0) {
//                    System.out.printf("%d ", j + 1);
                    sb.append(j + 1);
                    sb.append(" ");
                    prev = j + 1;
                    nums[j]--;
                    break;
                }
            }
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        Scanner cin = new Scanner(System.in);
//        int hp = cin.nextInt();
//        int normalAttack = cin.nextInt();
//        int buffedAttack = cin.nextInt();
//        System.out.println(attackGame3(840, 1, 5));
//        System.out.println(attackGame(840, 1, 5));

        String str = "1 3 1 1 2 5 1 2 2 1 5 4 4 2 1 1 3 1 4 4 1 1 3 2 1 1 2 4 3 3 2 3 1 4 4 1 1 2 1 2 1 2 1 3 2 1 3 3 2 2 " +
                "2 1 1 1 4 1 1 3 1 1 1 2 5 2 1 1 3 1 1 3 1 2 1 1 1 3 3 1 2 3 2 3 1 2 1 3 1 2 1 1 4 2 3 1 1 1 6 2 1 6 3 6" +
                " 3 3 1 1 1 1 1 2 2 1 3 1 2 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 2 3 1 1 1 5 1 2 2 1 1 1 2 2 1 4 2 1 1 4 1 4 " +
                "1 1 2 1 2 2 2 2 2 2 3 2 1 1 1 1 5 1 3 1 1 2 4 3 1 2 1 4 1 2 2 3 4 1 3 2 1 2 3 1 2 4 2 1 1 3 1 4 4 2 4 2" +
                " 7 1 2 4 3 1 3 1 5 2 1 1 1 2 3 1 1 1 4 1 1 5 1 1 2 1 1 5 3 1 3 2 2 1 1 3 1 1 1 3 2 4 1 1 3 3 3 1 1 1 4 2 " +
                "2 5 1 6 1 1 1 5 1 2 1 5 5 1 1 3 4 3 1 2 3 2 3 3 5 1 1 2 1 1 1 6 1 1 4 1 1 2 1 1 1 2 1 2 2 1 1 1 1 3 2 1 " +
                "2 2 1 1 2 2 1 5 3 1 1 3 4 6 1 2 4 1 3 1 2 1 1 1 5 1 1 5 1 2 2 3 1 1 1 2 1 2 1 2 1 1 2 4 2 1 1 2 2 1 4 2 " +
                "1 1 1 5 3 1 4 2 2 3 2 1 1 3 2 1 2 1 1 2 1 2 3 2 3 2 2 4 4 5 1 2 1 2 1 1 1 1 4 1 1 1 6 2 1 2 3 4 1 2 1 1" +
                " 3 1 4 1 3 1 1 2 1 2 1 2 2 2 4 2 4 2 1 1 1 1 1 1 2 2 1 4 1 1 4 1 3 1 4 1 2 3 1 1 3 1 1 1 2 2 1 1 1 2 1 " +
                "5 5 2 2 1 3 6 3 1 4 1 1 4 1 1 2 1 2 2 3 1 7 1 3 1 1 1 1 2 1 3 1 1 2 2 1 1 4 2 3 1 2 1 1 1 3 3 2 1 1 2 1 " +
                "1 1 5 2 4 5 4 2 2 1 1 2 5 1 1 2 6 1 4 2 3 1 3 2 2 4 5 1 1 2 4 1 3 4 1 1 4 1 1 1 2 5 2 4 1 2 1 2 5 2 2 4" +
                " 1 1 1 1 4 1 1 1 1 1 3 1 1 4 1 4 2 4 1 1 3 1 1 3 2 1 1 1 1 1 1 2 1 4 1 1 1 1 4 1 1 7 1 3 2 1 3 1 3 5 3 3" +
                " 3 2 3 2 7 3 1 4 5 1 2 1 2 2 1 1 1 3 4 4 2 2 1 1 1 5 6 2 6 1 2 4 4 3 1 2 6 5 2 4 3 1 2 3 3 1 1 1 2 1 1 3 " +
                "3 1 5 1 6 2 2 2 1 2 2 1 5 1";
        String result = "1 2 3 2 4 2 5 6 5 6 7 6 8 6 8 6 9 10 9 11 12 11 12 11 12 11 12 11 13 14 13 14 13 15 13 16 17 18 17 19 17 19 20 19 20 19 20 21 20 22 23 24 23 24 23 25 26 27 28 27 28 29 28 29 28 29 30 31 30 31 30 32 33 32 34 32 34 35 34 35 34 35 36 35 37 38 39 38 40 41 40 42 43 42 44 45 44 45 44 46 47 48 47 48 47 48 49 50 49 50 51 52 51 53 54 55 56 55 57 55 58 55 58 59 58 60 61 62 63 62 63 64 63 64 63 65 63 66 67 68 67 69 67 70 71 70 72 70 72 73 74 75 76 77 76 77 76 77 78 79 80 79 80 81 80 81 82 83 82 84 82 84 85 86 87 86 88 86 88 89 90 91 92 91 92 91 93 91 93 94 93 95 96 97 98 97 98 97 99 97 100 97 100 97 100 101 100 101 100 101 100 102 103 102 103 102 103 102 104 102 104 102 104 105 106 107 108 109 110 111 110 111 112 113 114 113 115 113 115 116 117 118 119 120 121 122 123 124 125 126 127 126 128 126 129 130 131 132 133 132 133 134 133 135 136 137 138 137 139 137 139 137 140 137 140 141 142 143 144 145 144 145 146 147 148 147 148 147 149 147 150 151 152 151 153 151 153 151 153 154 153 155 156 157 156 158 159 158 159 160 161 160 161 162 163 162 163 164 165 164 165 164 166 167 168 169 170 171 170 172 170 172 170 172 170 173 174 175 176 175 176 177 176 177 176 177 178 179 180 179 181 182 181 183 181 183 181 184 185 184 185 186 185 186 187 186 188 186 188 189 188 189 190 191 192 191 192 193 192 194 195 194 195 196 195 196 195 197 198 199 200 199 201 199 201 202 201 202 201 202 203 202 203 204 205 204 205 204 206 204 206 207 206 208 206 208 206 209 206 209 206 209 210 209 210 211 210 212 213 212 214 212 214 215 214 215 214 216 214 217 218 219 220 219 220 221 220 222 223 224 225 224 226 224 227 224 227 228 227 229 227 230 227 230 231 232 233 234 233 234 233 234 233 235 233 236 237 236 237 236 238 239 238 240 241 242 241 243 241 244 245 246 245 246 245 247 248 247 249 247 250 247 250 251 250 251 252 251 252 253 252 254 255 256 257 256 257 256 258 256 258 259 260 259 261 259 261 259 261 259 261 262 261 263 261 264 265 266 265 267 265 267 265 268 265 269 270 269 270 269 270 269 270 269 270 271 272 273 274 273 274 273 274 275 274 275 276 275 277 278 277 278 279 278 279 280 281 280 281 280 281 282 283 282 284 282 285 282 285 282 286 287 288 289 290 289 291 289 292 289 292 289 292 289 292 293 294 295 296 295 297 298 299 300 299 301 302 301 302 303 304 305 306 307 308 307 308 307 309 310 311 310 311 312 313 314 315 314 315 316 317 318 317 318 317 318 317 319 317 320 321 322 321 322 321 322 323 322 323 324 323 325 323 325 323 326 323 326 327 326 328 326 328 329 328 330 331 330 332 333 334 335 334 336 334 337 334 337 334 337 338 337 339 337 339 340 341 340 341 342 341 343 344 345 346 345 347 348 347 349 350 349 351 352 353 352 353 354 353 354 353 355 356 357 358 357 358 359 360 361 360 361 360 362 360 363 364 365 366 365 366 365 366 365 367 365 368 369 368 369 368 370 368 370 371 372 371 372 371 373 374 375 376 375 376 375 377 378 379 378 380 381 382 381 383 384 383 384 385 384 385 386 387 386 387 386 388 389 388 389 390 389 390 389 390 391 390 391 392 391 393 391 393 391 394 395 396 395 397 398 399 400 401 400 402 400 403 400 404 405 404 405 404 406 404 407 404 407 404 408 409 408 409 408 409 410 409 411 412 411 413 414 415 414 416 414 416 417 416 418 416 418 419 418 420 421 422 421 423 424 423 425 426 425 426 427 428 427 428 429 428 429 428 430 431 430 431 430 432 430 433 434 435 436 437 438 439 438 439 440 441 442 441 443 441 444 441 444 445 444 446 444 446 447 446 448 449 448 450 448 450 448 451 452 451 453 451 454 455 454 456 454 457 458 459 458 459 460 461 462 463 464 463 465 466 465 466 465 466 465 466 465 466 467 468 467 468 469 470 471 470 471 470 471 472 471 472 471 472 471 473 474 475 474 476 474 477 474 477 478 477 479 477 480 481 480 482 483 482 483 484 485 484 486 484 486 487 486 488 486 488 486 488 486 489 486 490 491 492 493 494 493 495 496 495 497 495 498 499 498 499 500 501 502 503 502 503 502 504 502 504 505 504 506 507 506 508 509 510 511 510 511 510 511 512 513 512 514 515 516 515 517 518 519 520 519 520 519 521 519 521 519 521 522 521 522 523 522 523 522 523 522 523 524 525 524 525 526 527 528 529 528 529 530 529 531 529 532 529 532 533 534 533 535 533 535 533 535 533 535 533 536 537 536 537 538 537 539 540 539 540 539 541 542 541 542 543 542 543 542 543 544 543 545 543 546 547 546 547 548 547 549 547 549 550 549 550 551 550 552 550 553 554 553 555 553 556 553 557 558 557 558 559 558 559 558 560 558 560 561 560 562 560 562 563 564 565 564 565 566 565 566 565 567 565 567 568 569 568 570 568 571 568 572 573 574 573 575 573 576 573 577 578 579 580 579 581 579 582 583 582 584 582 584 582 584 585 584 585 586 587 586 588 586 589 586 589 590 589 591 592 593 592 593 592 594 595 596 597 598 599 600 601 600 602 603 602 604 602 605 602 606 607 608 607 609 607 610 607 610 611 610 612 610 612 610 612 610 613 610 613 614 615 616 615 617 615 617 618 617 618 619 618 619 618 619 618 620 621 620 621 620 621 622 623 622 623 624 623 624 625 626 625 626 625 626 625 627 625 628 625 628 625 628 629 628 629 630 629 631 629 631 629 632 633 634 633 634 635 636 637 638 639 638 639 638 639 640 639 640 641 640 641 640 642 643 642 644 645 646 647 646 647 646 647 646 647 646 647 648 647 648 649 650 649 651 649 651 649 652 649 652 649 652 653 652 653 654 653 654 653 654 655 656 657 656 657 658 657 658 657 658 657 658 657 658 659 660 659 660 661 660 661 660 661 662 663 664 663 664 665 664 665 666 665 667 668 669 670 669 671 672 673 672 673 672 673 674 675 676 675 677 675 677 675 677 675 677 678 677 678 677 679 680 679 680 681 682 683 685 682 685 683 685 684 685 686 685 ";
        int[] results = Arrays.stream(result.split(" ")).mapToInt(Integer::parseInt).toArray();
        System.out.println(results.length);

        int[] trees = Arrays.stream(str.split(" ")).mapToInt(Integer::parseInt).toArray();
        System.out.println(Arrays.stream(trees).sum());
         String strs =  plantTree(686, trees, Arrays.stream(trees).sum());
        int[] results1 = Arrays.stream(strs.split(" ")).mapToInt(Integer::parseInt).toArray();
        System.out.println(results1.length);
        System.out.println(Arrays.equals(results, results1));
//        ThreadLocal
    }
}
